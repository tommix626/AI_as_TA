from jsonschema import validate
from jsonschema.exceptions import ValidationError
import json

def validate_schema(input_schema, predefined_schema):
    try:
        validate(instance=input_schema, schema=predefined_schema)
        print("Schema validation passed.")
        return True
    except ValidationError as e:
        print(f"Schema validation error: {e.message}")
        return False

def parse_llm_generated_schema(generated_schema):
    # Assuming `generated_schema` is a list of component descriptions generated by the LLM chain
    components = []
    for component in generated_schema:
        comp_details = {
            "name": component["name"],
            "inputs": {},
            "outputs": {}
        }
        for input_param in component.get("inputs", []):
            comp_details["inputs"][input_param["parameter"]] = input_param.get("content", "")
        for output_param in component.get("outputs", []):
            comp_details["outputs"][output_param["parameter"]] = output_param.get("content", "")
        components.append(comp_details)
    return components



def validate_and_parse_llm_output(llm_output_string, validation_schema):
    """
    Validates the LLM output against a given schema and parses it if validation passes.

    :param llm_output_string: JSON string representation of the LLM output.
    :param validation_schema: JSON schema for validation.
    :return: Parsed components dictionary if validation and parsing are successful, None otherwise.
    """
    try:
        # Convert JSON string to Python dictionary
        llm_output = json.loads(llm_output_string)

        # Validate the LLM output
        validate(instance=llm_output, schema=validation_schema)
        print("LLM output validation passed.")

        # Parse the validated LLM output
        components = parse_llm_generated_schema(llm_output)
        return components

    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e.msg}")
    except ValidationError as e:
        print(f"LLM output validation error: {e.message}")

    # Return None if either conversion, validation or parsing fails
    return None

